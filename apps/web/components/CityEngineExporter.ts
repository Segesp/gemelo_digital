import * as THREE from 'three';

export class CityEngineExporter {
  static exportToOBJ(scene: THREE.Scene, filename: string = 'city_model.obj'): void {
    // Simple OBJ format export (basic implementation)
    let objContent = '# Gemelo Digital Chancay - City Engine Export\n';
    let vertexIndex = 1;
    
    scene.traverse((object) => {
      if (object instanceof THREE.Mesh && object.userData.type === 'building') {
        const geometry = object.geometry;
        const position = object.position;
        
        // Add vertices (simplified)
        objContent += `o ${object.userData.id || 'building'}\n`;
        
        if (geometry instanceof THREE.BoxGeometry) {
          const width = object.scale.x;
          const height = object.scale.y; 
          const depth = object.scale.z;
          
          // Basic box vertices
          objContent += `v ${position.x - width/2} ${position.y - height/2} ${position.z - depth/2}\n`;
          objContent += `v ${position.x + width/2} ${position.y - height/2} ${position.z - depth/2}\n`;
          objContent += `v ${position.x + width/2} ${position.y + height/2} ${position.z - depth/2}\n`;
          objContent += `v ${position.x - width/2} ${position.y + height/2} ${position.z - depth/2}\n`;
          
          // Basic faces
          objContent += `f ${vertexIndex} ${vertexIndex + 1} ${vertexIndex + 2} ${vertexIndex + 3}\n`;
          vertexIndex += 4;
        }
      }
    });
    
    const blob = new Blob([objContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    
    const link = document.createElement('a');
    link.href = url;
    link.download = filename;
    link.click();
    
    URL.revokeObjectURL(url);
  }

  static exportToGLTF(scene: THREE.Scene, filename: string = 'city_model.gltf'): void {
    // Note: This would require additional GLTF exporter dependency
    // For now, we'll create a simplified JSON export
    const sceneData = {
      metadata: {
        version: '1.0',
        type: 'CityEngine',
        generator: 'Gemelo Digital Chancay',
        timestamp: new Date().toISOString()
      },
      buildings: [] as any[],
      streets: [] as any[],
      zones: [] as any[]
    };

    // Extract building data from scene
    scene.traverse((object) => {
      if (object.userData.type === 'building') {
        sceneData.buildings.push({
          id: object.userData.id,
          position: object.position.toArray(),
          scale: object.scale.toArray(),
          type: object.userData.buildingType,
          color: object.userData.color
        });
      }
    });

    const blob = new Blob([JSON.stringify(sceneData, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    
    const link = document.createElement('a');
    link.href = url;
    link.download = filename.replace('.gltf', '.json');
    link.click();
    
    URL.revokeObjectURL(url);
  }

  static exportScreenshot(canvas: HTMLCanvasElement, filename: string = 'city_view.png'): void {
    canvas.toBlob((blob) => {
      if (blob) {
        const url = URL.createObjectURL(blob);
        const link = document.createElement('a');
        link.href = url;
        link.download = filename;
        link.click();
        URL.revokeObjectURL(url);
      }
    });
  }

  static generateReport(buildingData: any[], metadata: any): string {
    const report = `
# City Engine Analysis Report
Generated: ${new Date().toLocaleString()}

## Project Overview
- **Location**: Puerto de Chancay, Peru
- **Buildings Generated**: ${buildingData.length}
- **Dataset**: ${metadata.dataset || 'N/A'}
- **Parameter**: ${metadata.parameter || 'N/A'}

## Building Distribution
- **Residential**: ${buildingData.filter(b => b.type === 'residential').length}
- **Commercial**: ${buildingData.filter(b => b.type === 'commercial').length}  
- **Industrial**: ${buildingData.filter(b => b.type === 'industrial').length}
- **Port**: ${buildingData.filter(b => b.type === 'port').length}

## Zoning Analysis
- **Total Area**: Approximately 1.6 kmÂ²
- **Zone Types**: 4 (Port, Commercial, Residential, Industrial)
- **Street Network**: Grid pattern with main arterials

## Urban Planning Insights
- Port area optimized for cargo operations
- Commercial zone positioned for accessibility
- Residential areas positioned away from industrial zones
- Adequate street network for traffic flow

## Export Information
This report was generated by the Gemelo Digital Chancay City Engine module.
For more information, visit: http://localhost:3000
    `.trim();

    const blob = new Blob([report], { type: 'text/markdown' });
    const url = URL.createObjectURL(blob);
    
    const link = document.createElement('a');
    link.href = url;
    link.download = 'city_engine_report.md';
    link.click();
    
    URL.revokeObjectURL(url);

    return report;
  }
}